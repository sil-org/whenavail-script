#!/bin/bash
# Wrapper script which tests if an http request returns a 200 response
#
# Loops until the connection can be made, or the timeout is reached
#set -x

function usage () {
  echo "Usage: $0 <url> <interval> <timeout> command [arguments] ..."
  echo ""
  echo "  interval is in seconds (0 for default 1 second)"
  echo "  timeout is in seconds (0 for infinte timeout)"
  echo ""
  echo "Exit Statuses:"
  echo "  41 - script error"
  echo "  42 - timeout"
}

# Check for arguments
if [[ $# < 4 ]]; then
  usage
  exit 41
fi

URL="$1"
INTERVAL="$2"
TIMEOUT="$3"

# Basic url checking
regex='(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'

if ! [[ $URL =~ $regex ]]; then
  echo "<url> must be a valid url"
  exit 41
fi

if ! [[ $INTERVAL =~ ^[0-9]+$ ]]; then
  echo "<interval> must be a number (0 for default interval)"
  exit 41
fi

if ! [[ $TIMEOUT =~ ^[0-9]+$ ]]; then
  echo "<timeout> must be a number (0 for infinite timeout)"
  exit 41
fi

# shift out ; "$@" now contains the command and its arguments
shift 3

function cmd-check () {
name=$1
shift 1

# See if the command is available, (under any of its names)
# then define the named variable with its binary path
for cmd in "$@"; do
  if which $cmd > /dev/null; then
    declare -g $name="$(which $cmd)"
    return
  fi
done

# Exit if it cannot be found
echo Commands not found: $@
exit 41
}

# Check for curl
cmd-check CURL curl

if [[ $INTERVAL == 0 ]]; then
  INTERVAL=1
fi

if [[ $TIMEOUT == 0 ]]; then
  CHECK=false
else
  CHECK=true
fi

# Detection loop:
while true; do
  echo "Checking..."
  if $CURL --output /dev/null --silent --fail "$URL"; then
    break
  fi

  if $CHECK; then
    if [[ $TIMEOUT == 0 ]]; then
      # Timeout reached
      exit 42
    else
      TIMEOUT=$(( $TIMEOUT-1 ))
    fi
  fi
  sleep $INTERVAL
done

exec "$@"

#!/bin/bash
# Wrapper script which tests if a connection can be made to a remote service
#
# Loops until the connection can be made, or the timeout is reached
set -x

function usage () {
  echo "Usage: $0 <remote_host> <remote_port> <timeout> command [arguments] ..."
  echo ""
  echo "  timeout is in seconds (0 for infinte timeout)"
  echo ""
  echo "Exit Statuses:"
  echo "  41 - script error"
  echo "  42 - timeout"
}

# Check for arguments
if [[ $# -lt 4 ]]; then
  usage
  exit 41
fi

HOST="$1"
PORT="$2"
TIMEOUT="$3"

# Basic number checking
if ! [[ $PORT =~ ^[0-9]{,5}$ ]]; then
  echo "<port> must be a valid port number"
  exit 41
fi

if ! [[ $TIMEOUT =~ ^[0-9]+$ ]]; then
  echo "<timeout> must be a number (0 for infinite timeout)"
  exit 41
fi

# shift out ; "$@" now contains the command and its arguments
shift 3

function cmd-check () {
name=$1
shift 1

# See if the command is available, (under any of its names)
# then define the name variable with its binary path
for cmd in "$@"; do
  if which $cmd > /dev/null; then
    declare -g $name="$(which $cmd)"
    return
  fi
done

# Exit if it cannot be found
echo Commands not found: $@
exit 41
}

# Check for netcat
cmd-check NC netcat ncat

# change options, depending on which implementation of netcat
# ncat (from nmap) doesn't have equivalent of -z
if [[ $NC =~ ^.*ncat$ ]]; then
  OPT=
else
  OPT="-z -v"
fi

if [[ $TIMEOUT == 0 ]]; then
  CHECK=false
else
  CHECK=true
fi

echo "NC =" $NC
echo "OPT =" $OPT

# Detection loop:
while true; do
  if $NC $OPT "$HOST" $PORT; then
    break
  fi

  if $CHECK; then
    if [[ $TIMEOUT == 0 ]]; then
      # Timeout reached
      exit 42
    else
      TIMEOUT=$(( $TIMEOUT-1 ))
    fi
  fi

  sleep 1
done

exec "$@"
